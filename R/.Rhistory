p <- 1/(1 + 1/exp(log_odds))
y <- rbinom(n, 1, p)
y <- factor(y == 0)
fit <- glm(y ~ x, family = binomial)
coef(fit)
coef(fit)
w = rep(0.75, n)
w[y == 1] = 1.5
fit <- glm(y ~ x, family = binomial, weights = w)
coef(fit)
fit <- glm(y ~ x, family = binomial, weights)
coef(fit)
w = rep(0.75, n)
w[y == 1] = 1.5
fit2 <- glm(y ~ x, family = binomial, weights = w)
coef(fit2)
w = rep(1, n)
w[y == 1] = 2
fit2 <- glm(y ~ x, family = binomial, weights = w)
coef(fit2)
w
y
w = rep(1, n)
w[y] = 2
fit2 <- glm(y ~ x, family = binomial, weights = w)
coef(fit2)
w = rep(0.75, n)
w[y] = 1.5
fit2 <- glm(y ~ x, family = binomial, weights = w)
coef(fit2)
w
y
w = rep(0.75, n)
w[y] = 1.5
w
w[y == "TRUE"] = 1.5
w
fit2 <- glm(y ~ x, family = binomial, weights = w)
coef(fit2)
n <- 52
x <- rnorm(n)
log_odds <- 1 + 3 * x + rnorm(n, 0, 0.05)
p <- 1/(1 + 1/exp(log_odds))
y <- rbinom(n, 1, p)
y <- factor(y == 0)
fit <- glm(y ~ x, family = binomial, weights)
coef(fit)
w = rep(0.75, n)
w[y == "TRUE"] = 1.5
fit2 <- glm(y ~ x, family = binomial, weights = w)
coef(fit2)
1 | 0
as.numeric(1 | 0)
as.numeric(c(1, 1, 0, 0) | c(1, 0, 1, 0))
meta.link = "https://ftp.ncbi.nlm.nih.gov/geo/series/GSE149nnn/GSE149809/matrix/GSE149809_series_matrix.txt.gz"
x <- readr::read_tsv(meta.link)
str(x)
x
View(x)
link = "ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE149nnn/GSE149809/miniml/"
x = readr::read_tsv(link)
View(x)
x = readr::read_csv(link)
link = "https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE149809&format=file&file=GSE149809%5Ffragment%5Fcount%5Fmatrix%2Ecsv%2Egz"
x = readr::read_csv(link)
link = "https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE149809&format=file&file=GSE149809%5Ffragment%5Fcount%5Fmatrix%2Ecsv%2Egz"
x = readr::read_csv2(link)
x = readr::read_tsv(link)
write.csv2
?write.csv
x = rnorm(20, 5, 1)
y = rnorm(20, x, 1)
plot(x, y)
y = rnorm(20, abs(x - 2.5), 1)
plot(x, y)
y = rnorm(20, abs(x - 2.5), 3)
plot(x, y)
x = rt(10, 1) + 3
y = rnorm(10, abs(x - 2.5), 3)
plot(x, y)
x = rt(20, 1) + 3
y = rnorm(10, abs(x - 2.5), 3)
plot(x, y)
y = rnorm(20, abs(x - 2.5), 3)
plot(x, y)
lines(lowess(y~x), col = "green")
set.seed(0)
n = 15
x = rt(n, 1) + 3
y = rnorm(n, abs(x - 2.5), 3)
plot(x, y)
lines(lowess(y~x), col = "green")
set.seed(1)
n = 15
x = rt(n, 1) + 3
y = rnorm(n, abs(x - 2.5), 3)
plot(x, y)
lines(lowess(y~x), col = "green")
set.seed(1)
n = 15
x = rt(n, 2) + 3
y = rnorm(n, abs(x - 2.5), 3)
plot(x, y)
lines(lowess(y~x), col = "green")
set.seed(1)
n = 15
x = rt(n, 1.5) + 3
y = rnorm(n, abs(x - 2.5), 3)
plot(x, y)
lines(lowess(y~x), col = "green")
lines(loess(y~x), col = "green")
set.seed(1)
n = 15
x = rt(n, 1.5) + 3
y = rnorm(n, abs(x - 2.5), 3)
plot(x, y)
lines(loess(y~x), col = "green")
loess(y~x)
?lowess
?loess
loess(y~x)
predict(loess(y~x))
predict(loess(y~x), newdata = data.frame(x = seq(min(x), max(x), 0.1)))
plot(x, y)
# lines(loess(y~x), col = "green")
lines(x = seq(min(x), max(x), 0.1),
y = predict(loess(y~x), newdata = data.frame(x = seq(min(x), max(x), 0.1))),
col = "green")
# lines(loess(y~x), col = "green")
lines(x = seq(min(x), max(x), 0.1),
y = predict(loess(y~x, span = 1.5), newdata = data.frame(x = seq(min(x), max(x), 0.1))),
col = "green")
# lines(loess(y~x), col = "green")
lines(x = seq(min(x), max(x), 0.1),
y = predict(loess(y~x, span = 5), newdata = data.frame(x = seq(min(x), max(x), 0.1))),
col = "green")
# lines(loess(y~x), col = "green")
lines(x = seq(min(x), max(x), 0.1),
y = predict(loess(y~x, span = 1), newdata = data.frame(x = seq(min(x), max(x), 0.1))),
col = "green")
# lines(loess(y~x), col = "green")
lines(x = seq(min(x), max(x), 0.1),
y = predict(loess(y~x, span = 0.9), newdata = data.frame(x = seq(min(x), max(x), 0.1))),
col = "green")
set.seed(1)
n = 15
x = rt(n, 1.5) + 3
y = rnorm(n, abs(x - 2.5), 3)
plot(x, y)
# lines(loess(y~x), col = "green")
lines(x = seq(min(x), max(x), 0.1),
y = predict(loess(y~x, span = 0.9), newdata = data.frame(x = seq(min(x), max(x), 0.1))),
col = "green")
# lines(loess(y~x), col = "green")
lines(x = seq(min(x), max(x), 0.1),
y = predict(loess(y~x, span = 0.8), newdata = data.frame(x = seq(min(x), max(x), 0.1))),
col = "green")
# lines(loess(y~x), col = "green")
lines(x = seq(min(x), max(x), 0.1),
y = predict(loess(y~x, span = 0.95), newdata = data.frame(x = seq(min(x), max(x), 0.1))),
col = "green")
set.seed(1)
n = 15
x = rt(n, 1.5) + 3
y = rnorm(n, abs(x - 2.5), 3)
plot(x, y)
# lines(loess(y~x), col = "green")
lines(x = seq(min(x), max(x), 0.1),
y = predict(loess(y~x, span = 0.95), newdata = data.frame(x = seq(min(x), max(x), 0.1))),
col = "green")
set.seed(1)
n = 25
x = rt(n, 1.5) + 3
y = rnorm(n, abs(x - 2.5), 3)
plot(x, y)
# lines(loess(y~x), col = "green")
lines(x = seq(min(x), max(x), 0.1),
y = predict(loess(y~x, span = 0.95), newdata = data.frame(x = seq(min(x), max(x), 0.1))),
col = "green")
set.seed(1)
n = 25
x = rt(n, 1.5) + 3
y = rnorm(n, abs(x - 2.5), 2)
plot(x, y)
# lines(loess(y~x), col = "green")
lines(x = seq(min(x), max(x), 0.1),
y = predict(loess(y~x, span = 0.95), newdata = data.frame(x = seq(min(x), max(x), 0.1))),
col = "green")
# lines(loess(y~x), col = "green")
lines(x = seq(min(x), max(x), 0.1),
y = predict(loess(y~x, span = 0.7), newdata = data.frame(x = seq(min(x), max(x), 0.1))),
col = "green")
# lines(loess(y~x), col = "green")
lines(x = seq(min(x), max(x), 0.1),
y = predict(loess(y~x, span = 0.95), newdata = data.frame(x = seq(min(x), max(x), 0.1))),
col = "green")
# lines(loess(y~x), col = "green")
lines(x = seq(min(x), max(x), 0.1),
y = predict(loess(y~x, span = 0.9), newdata = data.frame(x = seq(min(x), max(x), 0.1))),
col = "green")
set.seed(1)
n = 25
x = rt(n, 1.5) + 3
y = rnorm(n, abs(x - 2.5), 2)
plot(x, y)
# lines(loess(y~x), col = "green")
lines(x = seq(min(x), max(x), 0.1),
y = predict(loess(y~x, span = 0.9), newdata = data.frame(x = seq(min(x), max(x), 0.1))),
col = "green")
set.seed(1)
n = 25
x = rt(n, 1.5) + 3
y = rnorm(n, abs(x - 2.5), 2)
plot(x, y)
# lines(loess(y~x), col = "green")
lines(x = seq(min(x), max(x), 0.1),
y = predict(loess(y~x, span = 0.8), newdata = data.frame(x = seq(min(x), max(x), 0.1))),
col = "green")
set.seed(1)
n = 25
x = rt(n, 1.5) + 3
y = rnorm(n, abs(x - 2.5), 2)
plot(x, y)
# lines(loess(y~x), col = "green")
lines(x = seq(min(x), max(x), 0.1),
y = predict(loess(y~x, span = 0.9), newdata = data.frame(x = seq(min(x), max(x), 0.1))),
col = "green")
install.packages("fANCOVA")
fANCOVA::loess.as
fANCOVA::loess.as(x, y)
fit = fANCOVA::loess.as(x, y)
lines(x = seq(min(x), max(x), 0.1),
y = predict(fit, newdata = data.frame(x = seq(min(x), max(x), 0.1))),
col = "red")
fit$s
fit$pars
# lines(loess(y~x), col = "green")
lines(x = seq(min(x), max(x), 0.1),
y = predict(loess(y~x, span = 0.73), newdata = data.frame(x = seq(min(x), max(x), 0.1))),
col = "green")
lines(lowess(y~x), color = "blue")
set.seed(1)
n = 25
x = rt(n, 1.5) + 3
y = rnorm(n, abs(x - 2.5), 2)
y[sample(1:length(y), round(2 * n / 3)] = 0
set.seed(1)
n = 25
x = rt(n, 1.5) + 3
y = rnorm(n, abs(x - 2.5), 2)
y[sample(1:length(y), round(2 * n / 3)] = 0
plot(x, y)
y[sample(1:length(y), round(2 * n / 3))] = 0
plot(x, y)
y[y < 0] = abs(y[y < 0])
y[sample(1:length(y), round(2 * n / 3))] = 0
plot(x, y)
# lines(loess(y~x), col = "green")
lines(x = seq(min(x), max(x), 0.1),
y = predict(loess(y~x, span = 0.73), newdata = data.frame(x = seq(min(x), max(x), 0.1))),
col = "green")
lines(lowess(y~x), color = "blue")
lines(lowess(y~x), col = "blue")
lines(lowess(y~x), col = "blue")
set.seed(1)
n = 25
x = rt(n, 1.5) + 3
y = rnorm(n, abs(x - 2.5), 2)
y[y < 0] = abs(y[y < 0])
y[sample(1:length(y), round(2 * n / 3))] = 0
plot(x, y)
lines(lowess(y~x), col = "blue")
# lines(loess(y~x), col = "green")
lines(x = seq(min(x), max(x), 0.1),
y = predict(loess(y~x, span = 0.73), newdata = data.frame(x = seq(min(x), max(x), 0.1))),
col = "green")
install.packages("fANCOVA")
fit = fANCOVA::loess.as(x, y)
lines(x = seq(min(x), max(x), 0.1),
y = predict(fit, newdata = data.frame(x = seq(min(x), max(x), 0.1))),
col = "red")
fANCOVA::loess.as
?fANCOVA::loess.as
set.seed(1)
n = 20
x = rt(n, 1.5) + 3
y = rnorm(n, x, 1)
y[y < 0] = abs(y[y < 0])
y[sample(1:length(y), round(2 * n / 3))] = 0
plot(x, y)
lines(lowess(y~x), col = "blue")
set.seed(0)
n = 20
x = rt(n, 1.5) + 3
y = rnorm(n, x, 1)
y[y < 0] = abs(y[y < 0])
y[sample(1:length(y), round(2 * n / 3))] = 0
plot(x, y)
lines(lowess(y~x), col = "blue")
# lines(loess(y~x), col = "green")
lines(x = seq(min(x), max(x), 0.1),
y = predict(loess(y~x, span = 0.73), newdata = data.frame(x = seq(min(x), max(x), 0.1))),
col = "green")
fit = fANCOVA::loess.as(x, y)
lines(x = seq(min(x), max(x), 0.1),
y = predict(fit, newdata = data.frame(x = seq(min(x), max(x), 0.1))),
col = "red")
fANCOVA::loess.as
?loess
loess.as = function (x, y, degree = 1, criterion = c("aicc", "gcv"),
family = c("gaussian", "symmetric"), user.span = NULL,
plot = FALSE, ...)
{
criterion <- match.arg(criterion)
family <- match.arg(family)
x <- as.matrix(x)
if ((ncol(x) != 1) & (ncol(x) != 2))
stop("The predictor 'x' should be one or two dimensional!!")
if (!is.numeric(x))
stop("argument 'x' must be numeric!")
if (!is.numeric(y))
stop("argument 'y' must be numeric!")
if (any(is.na(x)))
stop("'x' contains missing values!")
if (any(is.na(y)))
stop("'y' contains missing values!")
if (!is.null(user.span) && (length(user.span) != 1 || !is.numeric(user.span)))
stop("argument 'user.span' must be a numerical number!")
if (nrow(x) != length(y))
stop("'x' and 'y' have different lengths!")
if (length(y) < 3)
stop("not enough observations!")
data.bind <- data.frame(x = x, y = y)
if (ncol(x) == 1) {
names(data.bind) <- c("x", "y")
}
else {
names(data.bind) <- c("x1", "x2", "y")
}
opt.span <- function(model, criterion = c("aicc", "gcv"),
span.range = c(0.05, 0.95)) {
as.crit <- function(x) {
span <- x$pars$span
traceL <- x$trace.hat
sigma2 <- sum(x$residuals^2)/(x$n - 1)
aicc <- log(sigma2) + 1 + 2 * (2 * (traceL + 1))/(x$n -
traceL - 2)
gcv <- x$n * sigma2/(x$n - traceL)^2
result <- list(span = span, aicc = aicc, gcv = gcv)
return(result)
}
criterion <- match.arg(criterion)
fn <- function(span) {
mod <- update(model, span = span)
as.crit(mod)[[criterion]]
}
result <- optimize(fn, span.range)
return(list(span = result$minimum, criterion = result$objective))
}
if (ncol(x) == 1) {
if (is.null(user.span)) {
fit0 <- loess(y ~ x, degree = degree, family = family,
data = data.bind, ...)
span1 <- opt.span(fit0, criterion = criterion)$span
}
else {
span1 <- user.span
}
fit <- loess(y ~ x, degree = degree, span = span1, family = family,
data = data.bind, ...)
}
else {
if (is.null(user.span)) {
fit0 <- loess(y ~ x1 + x2, degree = degree, family = family,
data.bind, ...)
span1 <- opt.span(fit0, criterion = criterion)$span
}
else {
span1 <- user.span
}
fit <- loess(y ~ x1 + x2, degree = degree, span = span1,
family = family, data = data.bind, ...)
}
if (plot) {
if (ncol(x) == 1) {
m <- 100
x.new <- seq(min(x), max(x), length.out = m)
fit.new <- predict(fit, data.frame(x = x.new))
plot(x, y, col = "lightgrey", xlab = "x",
ylab = "m(x)", ...)
lines(x.new, fit.new, lwd = 1.5, ...)
}
else {
m <- 50
x1 <- seq(min(data.bind$x1), max(data.bind$x1), len = m)
x2 <- seq(min(data.bind$x2), max(data.bind$x2), len = m)
x.new <- expand.grid(x1 = x1, x2 = x2)
fit.new <- matrix(predict(fit, x.new), m, m)
persp(x1, x2, fit.new, theta = 40, phi = 30, ticktype = "detailed",
xlab = "x1", ylab = "x2", zlab = "y",
col = "lightblue", expand = 0.6)
}
}
return(fit)
}
fit = loess.as(x, y)
lines(x = seq(min(x), max(x), 0.1),
y = predict(fit, newdata = data.frame(x = seq(min(x), max(x), 0.1))),
col = "red")
set.seed(0)
n = 20
x = rt(n, 1.5) + 3
y = rnorm(n, x, 1)
y[y < 0] = abs(y[y < 0])
y[sample(1:length(y), round(2 * n / 3))] = 0
plot(x, y)
n = 20
x = rt(n, 3) + 3
y = rnorm(n, x, 1)
y[y < 0] = abs(y[y < 0])
y[sample(1:length(y), round(2 * n / 3))] = 0
plot(x, y)
lines(lowess(y~x), col = "blue")
# lines(loess(y~x), col = "green")
lines(x = seq(min(x), max(x), 0.1),
y = predict(loess(y~x, span = 0.73), newdata = data.frame(x = seq(min(x), max(x), 0.1))),
col = "green")
fit = loess.as(x, y)
lines(x = seq(min(x), max(x), 0.1),
y = predict(fit, newdata = data.frame(x = seq(min(x), max(x), 0.1))),
col = "red")
n = 16
x = rt(n, 3) + 3
y = rnorm(n, x, 1)
y[y < 0] = abs(y[y < 0])
y[sample(1:length(y), round(2 * n / 3))] = 0
plot(x, y)
n = 16
x = rt(n, 3) + 3
y = rnorm(n, x, 1)
y[y < 0] = abs(y[y < 0])
y[sample(1:length(y), round(1 * n / 3))] = 0
plot(x, y)
lines(lowess(y~x), col = "blue")
# lines(loess(y~x), col = "green")
lines(x = seq(min(x), max(x), 0.1),
y = predict(loess(y~x, span = 0.73), newdata = data.frame(x = seq(min(x), max(x), 0.1))),
col = "green")
fit = loess.as(x, y)
lines(x = seq(min(x), max(x), 0.1),
y = predict(fit, newdata = data.frame(x = seq(min(x), max(x), 0.1))),
col = "red")
?seq
ifelse(c(0, 1, 2) == 1, "hi", "there")
n.max = 10
n = 0
while(n < n.max) {
n = n + 1
print(n)
if(n == 3)
break
else
next
}
while(n < n.max) {
n = n + 1
print(n)
if(FALSE)
break
else
next
}
n = 0
while(n < n.max) {
n = n + 1
print(n)
if(FALSE)
break
else
next
}
getwd()
write.table(NULL, test.tab)
write.table(NULL, "test.tab")
read.table("test.tab")
x = read.table("test.tab")
paste('hi there
here is some text
hopefully in one line')
x <- paste('hi there
here is some text
hopefully in one line')
gsub("\n\\s+", "", x)
gsub("\n\\s+", " ", x)
x <- paste('hi there
here is some text
hopefully in one line')
gsub("\n\\s+", " ", x)
gsub("\\s+\n\\s+", " ", x)
gsub("\\s*\n\\s+", " ", x)
x <- 'hi there
here is some text
hopefully in one line'
gsub("\\s*\n\\s+", " ", x)
install.packages("ape")
?ape:::dist.dna
ape:::dist.dna
ape:::dist_dna
ape:::dnds
?ape:::dnds
setwd("G:\VID\ASSAY_DEV\STAT\TRANSCRIPTOMICS\MANUSCRIPT\R-PACKAGE\Package_Directory\CpmERCCutoff\R")
setwd("G:\\VID\\ASSAY_DEV\\STAT\\TRANSCRIPTOMICS\\MANUSCRIPT\\R-PACKAGE\\Package_Directory\\CpmERCCutoff\\R")
